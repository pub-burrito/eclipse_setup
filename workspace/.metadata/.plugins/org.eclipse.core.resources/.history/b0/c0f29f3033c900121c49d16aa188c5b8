package com.cloud.sdk.service.sync;

import java.io.IOException;
import java.io.Serializable;
import java.util.Map;

import roboguice.util.Ln;

import com.cloud.framework.service.model.sync.SyncBox;
import com.cloud.framework.service.process.sync.CloudSyncEngine;
import com.cloud.framework.threading.AsyncRunnable.ExecutionCallback;
import com.cloud.framework.threading.AsyncRunnable.ExecutionThread;
import com.cloud.framework.threading.AsyncRunnable.ThreadAwareCallback;
import com.cloud.sdk.service.auth.CloudCredentials;
import com.cloud.sdk.service.sync.CloudSyncboxActivityListener.CloudFileStatus;

/**
 * <!--
 * CloudSyncboxOnDemandStatusListener.java
 * -->
 * Base class to be used by Syncbox consumers to listen to specific events triggered within the flow of the Engine's internal processes, ie: connected/disconnected as well as change detection etc.
 * 
 * @author <a href="mailto:roberto@cloud.com">Roberto Andrade</a>
 * @since 0.1
 * @date Mar 14, 2013
 * @copyright Copyright (c) 2013 Cloud.com. All rights reserved.
 */
@SuppressWarnings("serial")
public abstract class CloudSyncboxOnDemandStatusListener implements Serializable{

	/**
	 * 
	 */
	protected static final long serialVersionUID = 4115434121926016275L;
	
	Class<?> listenerType = getClass();
	
	/*
	 * marking methods non abstract empty implementations so they are all optional for overriding by subclasses
	 */
	public void onConnected(CloudSyncbox syncbox) {}
	public void onDisconnected(CloudSyncbox syncbox) {}
	public void onError(CloudSyncbox syncbox, Exception error) {}
	public void onChangeDetected(CloudSyncbox syncbox) {}
	
	/*
	 * Callback method enums
	 */
	private static enum SyncboxStateCallback implements ExecutionCallback {
		CONNECTED		("onStarted"),
		DISCONNECTED	("onStopped"),
		ERROR  			("onError"),
		CHANGE_DETECTED	("onChangeDetected"),
		;
		
		//enum attributes
		private final String methodName;
		
		private SyncboxStateCallback(String methodName) {
			this.methodName = methodName;
		}

		@Override
		public String methodName() {
			return methodName;
		}

		@Override
		public boolean isFinalState() {
			return false;
		}
	}
	
	/**
	 * Package protected callback method used by {@link CloudSyncbox} to invoke the abstract methods implemented by subclasses with awareness of its threading preference. See {@link ExecutionThread} annotation and uses.
	 * @param syncbox
	 */
	void connected(final CloudSyncbox syncbox) {
		new ThreadAwareCallback(SyncboxStateCallback.CONNECTED, listenerType, 

				//expected callback parameter types
				new Class<?>[] { CloudSyncbox.class }, 
					
				new Runnable() {
					public void run() {
						try {
							onConnected(syncbox);
						} catch (Exception e) {
							error(syncbox, e);
						}
					}
				}, 
				null
			
			).run();
	}

	/**
	 * Package protected callback method used by {@link CloudSyncEngine} to invoke the abstract methods implemented by subclasses with awareness of its threading preference. See {@link ExecutionThread} annotation and uses.
	 * @param syncbox
	 */
	void disconnected(final CloudSyncbox syncbox) {
		new ThreadAwareCallback(SyncboxStateCallback.DISCONNECTED, listenerType, 

				//expected callback parameter types
				new Class<?>[] { CloudSyncEngine.class, Map.class }, 
					
				new Runnable() {
					public void run() {
						try {
							onDisconnected(syncbox);
						} catch (Exception e) {
							error(syncbox, e);
						}
					}
				}, 
				null
			
			).run();
	}
	
	/**
	 * Package protected callback method used by {@link CloudSyncbox} to invoke the abstract methods implemented by subclasses with awareness of its threading preference. See {@link ExecutionThread} annotation and uses.
	 * @param syncbox
	 * @param error
	 */
	void error(final CloudSyncbox syncbox, final Exception error) {
		new ThreadAwareCallback(SyncboxStateCallback.ERROR, listenerType, 

				//expected callback parameter types
				new Class<?>[] { CloudSyncbox.class, Exception.class }, 
					
				new Runnable() {
					public void run() {
						onError(syncbox, error);
					}
				}, 
				null
			
			).run();
	}
	
	/**
	 * Package protected callback method used by {@link CloudSyncbox} to invoke the abstract methods implemented by subclasses with awareness of its threading preference. See {@link ExecutionThread} annotation and uses.
	 * @param syncbox
	 */
	void changesDetected(final CloudSyncbox syncbox) {
		new ThreadAwareCallback(SyncboxStateCallback.CHANGE_DETECTED, listenerType, 

				//expected callback parameter types
				new Class<?>[] { CloudSyncbox.class, CloudFileStatus.class, Map.class }, 
					
				new Runnable() {
					public void run() {
						onChangeDetected(syncbox);
					}
				}, 
				null
			
			).run();
	}
	
	/*
	 * The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject 
	 * method can restore it. The default mechanism for saving the Object's fields can be invoked by calling out.defaultWriteObject. 
	 * The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing 
	 * the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput.
	 */
	private void writeObject(java.io.ObjectOutputStream out)
		     throws IOException{

	}
	
	/*
	 * The readObject method is responsible for reading from the stream and restoring the classes fields. It may call in.defaultReadObject to 
	 * invoke the default mechanism for restoring the object's non-static and non-transient fields. The defaultReadObject method uses information 
	 * in the stream to assign the fields of the object saved in the stream with the correspondingly named fields in the current object. 
	 * This handles the case when the class has evolved to add new fields. The method does not need to concern itself with the state belonging to its 
	 * superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using 
	 * the methods for primitive data types supported by DataOutput.
	 */
	private void readObject(java.io.ObjectInputStream in)
	     throws IOException, ClassNotFoundException{
		 

	}
	
}
