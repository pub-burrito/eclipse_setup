package com.cloud.test.sdk.instrumented.service;

import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.List;
import java.util.Random;

import roboguice.util.Ln;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import com.cloud.sdk.service.sync.CloudFileItem;
import com.cloud.sdk.service.sync.CloudSyncbox;
import com.cloud.sdk.service.sync.CloudSyncboxActivityListener;
import com.cloud.sdk.threading.CloudCallHandler;
import com.cloud.test.common.AbstractCloudInstrumentedTest;

public class CloudSyncboxTest extends AbstractCloudInstrumentedTest {
	
	private static final String intentAction = "CloudSyncboxTest.action.SERIALIZED";
	private CloudSyncbox syncbox;
	private CloudSyncbox unserializedBox;
	
	@Override
	public void setUp() throws Exception {
		super.setUp();
		syncbox = null;
		unserializedBox = null;
		listenerHasBeenFired = false;
	}
	
	
	volatile boolean listenerHasBeenFired = false;
	
	public void testSerialization(){
		
		//Get a syncbox
		CloudSyncbox
			.list()
			.get(new CloudCallHandler<List<CloudSyncbox>>() {
				
				@Override
				public void onSuccess(List<CloudSyncbox> responseData) throws Exception {
					syncbox = responseData.get(0);
				}
				
				@Override
				public void onError(Exception error) {
					
				}
			});
		
		//broadcast receiver that  will deserialize the syncbox and test it
		BroadcastReceiver receiver = new BroadcastReceiver() {
			@Override
			public void onReceive(Context context, Intent intent) {
				Ln.i("Deserializing syncbox");
				unserializedBox = (CloudSyncbox)intent.getSerializableExtra("box");
				stopWaitingFor(syncbox);
			}
		};
		
		syncbox.listen(new CloudSyncboxActivityListener() {
			@Override
			public void onFileUpload(CloudSyncbox syncbox,
					CloudFileItem fileItem, long bytesUploaded,
					long totalBytesUploaded, long totalBytesExpected) {
				Ln.i("Listener Fired*******************************************************");
				listenerHasBeenFired = true;
				stopWaitingFor(listenerHasBeenFired);
			}
		});
		
		//intent filter for broadcast receiver
		IntentFilter filter = new IntentFilter() {
			{
				addAction(intentAction);
			}
		};
		
		//register receiver and broadcast
		getContext().registerReceiver(receiver, filter);
		Intent intent = new Intent(intentAction);
		Ln.i("Serializing syncbox");
		intent.putExtra("box", syncbox);
		
		Ln.i("Broadcasting");
		getContext().sendBroadcast(intent);
		
		long currentTime = Calendar.getInstance().getTimeInMillis();
		waitFor(syncbox, 20000);
		if(Calendar.getInstance().getTimeInMillis() - currentTime >= 20000)
			fail("test has timed out. Cloud deserialize syncbox");
		assertNotNull(unserializedBox);
		
		//check that all the accessible properties where copied correctly
		assertEquals(syncbox.id(), unserializedBox.id());
		assertEquals(syncbox.friendlyName(), unserializedBox.friendlyName());
		assertEquals(syncbox.isLiveSyncStarted(), unserializedBox.isLiveSyncStarted());
		assertEquals(syncbox.indexingComplete(), unserializedBox.indexingComplete());
		assertEquals(syncbox.path(), unserializedBox.path());
		assertEquals(syncbox.storagePlanId(), unserializedBox.storagePlanId());
		assertEquals(syncbox.storageQuota(), unserializedBox.storageQuota());
		assertEquals(syncbox.createdDate(), unserializedBox.createdDate());
		assertEquals(syncbox.credentials(), unserializedBox.credentials());
		
		File outputDir = getContext().getCacheDir();
		File outputFile;
		try {
			outputFile = File.createTempFile("temp" + new Random().nextInt(9999), ".txt", outputDir);
		
			unserializedBox
				.addFile(outputFile.getAbsolutePath(), "/")
				.handle(new CloudCallHandler<CloudFileItem>() {

					@Override
					public void onError(Exception error) {
						Ln.e(error);
						fail("Could not upload file. Syncbox listener could not be tested");
					}

					@Override
					public void onSuccess(CloudFileItem fileItem) throws Exception {
						Ln.i("File added. Listener should have been fired");
						waitFor(listenerHasBeenFired,10000);
						assertTrue(listenerHasBeenFired);
					}
				});
			
		} catch (IOException e) {
			fail("Could not create file. Syncbox listener could not be tested");
		}

	}
	
	public void testUploadingNonexsistantFile(){
		//Get a syncbox
		CloudSyncbox
			.list()
			.get(new CloudCallHandler<List<CloudSyncbox>>() {
				
				@Override
				public void onSuccess(List<CloudSyncbox> responseData) throws Exception {
					syncbox = responseData.get(0);
				}
				
				@Override
				public void onError(Exception error) {
					
				}
			});
		
		File file = new File(getActivity().getCacheDir() + "/someFile.file");
		file.delete();
		
		syncbox
			.addFile(file, "/")
			.handle(new CloudCallHandler<CloudFileItem>() {

				@Override
				public void onSuccess(CloudFileItem responseData)
						throws Exception {
					fail("File doesn't exist, test should not have passed");
					
				}

				@Override
				public void onError(Exception error) {
					assertTrue(true);
				}
			
			
			});
	}


}
