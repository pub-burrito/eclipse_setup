<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>com.cloud.sdk.android</groupId>
  <artifactId>CloudSDK-TestSuite</artifactId>
  <packaging>apk</packaging>
  
  <!-- Kept aligned with Cloud SDK version -->
  <version>0.2.9-SNAPSHOT</version>
  
  <inceptionYear>2013</inceptionYear>
  
  <organization>
      <name>Cloud.com</name>
      <url>http://cloud.com</url>
  </organization>
    
  <developers>
      <developer>
          <id>robertoandrade</id>
          <name>Roberto Andrade</name>
          <email>roberto@cloud.com</email>
      </developer>
      <developer>
          <id>stevenberlanga</id>
          <name>Steven Berlanga</name>
          <email>steven.berlanga@cloud.com</email>
      </developer>
  </developers>
  
  <scm>
      <developerConnection>scm:git:ssh://git@github.com/CloudCom/CloudSDK-TestSuite-Android.git</developerConnection>
      <url>http://github.com/CloudCom/CloudSDK-TestSuite-Android</url>
    <tag>HEAD</tag>
  </scm>
  
  <issueManagement>
      <system>CloudZilla</system>
      <url>http://developer.cloudstaging.us/support</url>
  </issueManagement>
  
  <distributionManagement>
	 <repository>
	    <id>cloud.archiva.internal</id>
	    <url>http://cloud.local:8180/archiva/repository/internal/</url>
	 </repository>
	 <snapshotRepository>
	    <id>cloud.archiva.snapshots</id>
	    <url>http://cloud.local:8180/archiva/repository/snapshots/</url>
	 </snapshotRepository>
  </distributionManagement>
  
  <ciManagement>
    <system>jenkins</system>
    <url>http://cloud.local:8080</url>
    <notifiers>
      <notifier>
        <type>mail</type>
        <sendOnError>true</sendOnError>
        <sendOnFailure>true</sendOnFailure>
        <sendOnSuccess>false</sendOnSuccess>
        <sendOnWarning>false</sendOnWarning>
        <configuration><address>build.android@cloud.com</address></configuration>
      </notifier>
    </notifiers>
  </ciManagement>
  
  <repositories>
    <repository>
        <id>cloud.archiva.internal</id>
        <url>http://cloud.local:8180/archiva/repository/internal/</url>
    </repository>
    <repository>
        <id>cloud.archiva.snapshots</id>
        <url>http://cloud.local:8180/archiva/repository/snapshots/</url>
    </repository>
    <!-- 
    <repository>
        <id>sonatype.oss.public</id>
        <url>https://oss.sonatype.org/content/groups/public/</url>
    </repository>
     -->
  </repositories>
  
  <dependencies>
  	
 	<!-- cucumber dependencies  -->     
    <dependency>
      <groupId>info.cukes</groupId>
      <artifactId>cucumber-picocontainer</artifactId>
      <version>1.1.3</version>
      <scope>test</scope>
    </dependency>
    
        
    <dependency>
      <groupId>info.cukes</groupId>
      <artifactId>cucumber-android</artifactId>
      <version>1.1.4-SNAPSHOT</version>
      <scope>compile</scope>
    </dependency>
    
    <dependency>
        <groupId>info.cukes</groupId>
        <artifactId>cucumber-junit</artifactId>
        <version>1.1.3</version>
        <scope>test</scope>
    </dependency>
      
    <!-- needs to be before android as that JAR also includes junit, httpclient, json stuff in it (but stubbed) -->
  	<dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>compile</scope>
      <exclusions>
          <exclusion>
              <groupId>org.hamcrest</groupId>
              <artifactId>hamcrest-core</artifactId>
          </exclusion>
      </exclusions>
    </dependency>
    
  	<dependency>
  	  <groupId>org.apache.httpcomponents</groupId>
  	  <artifactId>httpclient</artifactId>
  	  <version>4.0</version>
  	  <scope>test</scope>
  	</dependency>
  	
     <!-- ONEDAY: Marking this as compile so mocked jUnit tests work when running via Eclipse. Need to find a better way for this. Run as profile=build-script to use this as scope=provided or use one of the build scripts provided on cloud-android-build -->
     <!-- DOESWORKNOW :\ leaving comments in case it comes back.
     <scope>test</scope>
     <scope>provided</scope>
      -->
	<dependency>
      <groupId>com.google.android</groupId>
      <artifactId>android</artifactId>
      <version>4.1.1.4</version>
      <scope>compile</scope>
    </dependency>
	        
  	<dependency>
      <groupId>com.google.android</groupId>
      <artifactId>android-test</artifactId>
      <version>4.1.1.4</version>
      <scope>provided</scope>
    </dependency>
    
  	<!-- required by 3rd party libs, just flagging them as needed for test scope -->
    <dependency>
	  <groupId>android.support</groupId>
	  <artifactId>compatibility-v4</artifactId>
	  <version>11</version>
	  <scope>test</scope>
	</dependency>
	
    <!-- required by 3rd party libs, just flagging them as needed for test scope -->
    <dependency>
	  <groupId>com.google.android.maps</groupId>
	  <artifactId>maps</artifactId>
	  <version>17_r1</version>
	  <scope>test</scope>
	</dependency>
	
    <dependency>
      <groupId>org.robolectric</groupId>
      <artifactId>robolectric</artifactId>
      <version>2.0-alpha-1</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>
    
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.9.5</version>
      <scope>test</scope>
    </dependency>
    
    <!-- Using direct JAR reference to framework to avoid depending on SDK APKlib and generating conflicts with resources and com.cloud.framework.R.class (this way the JAR dependency above to testapp.jar does the job of providing the right copy of the framework R.class with the correctly generated IDs) -->
    <dependency>
      <groupId>com.cloud.sdk.android</groupId>
      <artifactId>CloudSDK</artifactId>    
      <version>0.2.9-SNAPSHOT</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>

    
    <!-- Needs Test app APK in order to run instrumented tests (on device/emulator) -->
    <!-- 
     -->
    <dependency>
      <groupId>com.cloud.sdk.android</groupId>
      <artifactId>CloudSDK-TestApp</artifactId>    
      <version>0.2.9-SNAPSHOT</version>
      <type>apk</type>
      <!-- 
      <scope>test</scope>
       -->
      <exclusions>
        <exclusion>
            <groupId>com.cloud.sdk.android</groupId>
            <artifactId>CloudSDK</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
    <!-- Need Test app JAR in order to run mocked/instrumented tests that refer to com.cloud.framework.R (need to be the same as the Test App's) -->
    <dependency>
      <groupId>com.cloud.sdk.android</groupId>
      <artifactId>CloudSDK-TestApp</artifactId>    
      <version>0.2.9-SNAPSHOT</version>
      <type>jar</type>
      <!--
      <scope>test</scope>
      -->
      <exclusions>
        <exclusion>
            <groupId>com.cloud.sdk.android</groupId>
            <artifactId>CloudSDK</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    
  </dependencies>
  
  <pluginRepositories>
  	  <pluginRepository>
          <id>oss.sonatype.org-jayway-releases</id>
          <name>Jayway OpenSource RELEASEs on Sonatype.org</name>
          <url>http://oss.sonatype.org/content/repositories/jayway-releases/</url>
      </pluginRepository>
      <pluginRepository>
          <id>oss.sonatype.org-jayway-snapshots</id>
          <name>Jayway OpenSource SNAPSHOTs on Sonatype.org</name>
          <url>http://oss.sonatype.org/content/repositories/jayway-snapshots/</url>
          <snapshots>
              <enabled>true</enabled>
          </snapshots>
      </pluginRepository>
  </pluginRepositories>

  <!--
  ======================================================
  USE THIS PROFILE WHEN BUILDING/RUNNING TESTS VIA MAVEN
  ======================================================
  
   Overrides default Android dependency so it's considered as scope=provided (as it should be) for Maven builds.
   Apparently Eclipse, m2e, m2e-android and maven-android-plugin are messing something up and Mocked jUnit tests under /src/test/java dont include Android.jar when running
   -->
  <profiles>
  	<profile>
  	    <id>build-script</id>
  	    <activation>
  	        <property>
  	            <name>profile</name>
  	            <value>build-script</value>
  	        </property>
  	    </activation>
  	    <dependencies>
  	        <dependency>
		      <groupId>com.google.android</groupId>
		      <artifactId>android</artifactId>
		      <version>4.1.1.4</version>
		      <scope>provided</scope>
		    </dependency>
	  	    <dependency>
		      <groupId>com.cloud.sdk.android</groupId>
		      <artifactId>CloudSDK</artifactId>
		      <version>0.2.9-SNAPSHOT</version>    
		      <type>jar</type>
		      <scope>provided</scope>
		    </dependency>
  	    </dependencies>
  	</profile>    

  	<profile>
  	    <id>uninstrumented</id>
  	    <activation>
  	        <property>
  	            <name>profile</name>
  	            <value>uninstrumented</value>
  	        </property>
  	    </activation>
  	    
  	    
  	    <!-- disabling Android builder to make building/testing faster (as no instrumentation is required) -->
  	    <!-- Phases at: https://github.com/jayway/maven-android-plugin/blob/master/src/main/resources/META-INF/plexus/components.xml -->
  	    <build>
  	        <plugins>
  	            
		  	    <!-- Overidding APK packaging as there seems to be a bug with android-maven-plugin APKLib functionality where it causes the JAR we're building side by side with the APK to be installed as .APK when an APK is not generated -->
			    <plugin>
		            <groupId>org.apache.maven.plugins</groupId>
		            <artifactId>maven-install-plugin</artifactId>
		            <version>2.4</version>
		            <executions>
		                <execution>
		                    <goals>
		                        <goal>install-file</goal>
		                    </goals>
		                    <phase>install</phase>
		                    <configuration>
		                        <file>${project.build.directory}/${project.build.finalName}.jar</file>
		                        <generatePom>false</generatePom>
		                        <pomFile>pom.xml</pomFile>
		                        <version>${my.version}</version>
		                        <packaging>jar</packaging>
		                    </configuration>
		                </execution>
		            </executions>
		        </plugin>
	     
  	            <plugin>
					<groupId>com.jayway.maven.plugins.android.generation2</groupId>
					<artifactId>android-maven-plugin</artifactId>
					<version>3.6.0</version>
					
  	                <executions>
  	                    <!-- This is required so it generates the R.class that tests use to reference test resources. 
						<execution>
		                    <id>default-generate-sources</id>
		                    <phase>none</phase>
		                </execution>
  	                     -->
						<execution>
		                    <id>default-proguard</id>
		                    <phase>none</phase>
		                </execution>
						<execution>
		                    <id>default-dex</id>
		                    <phase>none</phase>
		                </execution>
						<execution>
		                    <id>default-apk</id>
		                    <phase>none</phase>
		                </execution>
						<execution>
		                    <id>default-emma</id>
		                    <phase>none</phase>
		                </execution>
						<execution>
		                    <id>default-internal-pre-integration-test</id>
		                    <phase>none</phase>
		                </execution>
						<execution>
		                    <id>default-internal-integration-test</id>
		                    <phase>none</phase>
		                </execution>
		            </executions>
  	            </plugin>
  	        </plugins>
  	    </build>
  	</profile>    
  </profiles>
  
  <build>
      
    <!-- Used to be able to perform Manifest Mening, see configuration for android-maven-plugin below -->
    <resources>
	    <resource>
	        <targetPath>${project.build.directory}</targetPath>
	        <filtering>true</filtering>
	        <directory>${basedir}</directory>
	        <includes>
	            <include>AndroidManifest.xml</include>
	        </includes>
	    </resource>
	</resources>
	
  	<plugins>
  
	 	<!-- Disabling default resource copying so Maven Android plugin can do its thing with resources prior to packaging -->
	    <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <version>2.6</version>
            <executions>
                <execution>
                    <phase>initialize</phase>
                    <goals>
                        <goal>resources</goal>
                    </goals>
                </execution>
				<execution>
                    <id>default-resources</id>
                    <phase>DISABLED</phase>
                </execution>
            </executions>
            
            <configuration>
                <encoding>UTF-8</encoding>
            </configuration>
        </plugin>
	      
	      <!-- Maven Android to perform APK packaging via Maven instead of Eclipse built-in build process -->
	    <plugin>
			<groupId>com.jayway.maven.plugins.android.generation2</groupId>
			<artifactId>android-maven-plugin</artifactId>
			<version>3.6.0</version>
	
			<extensions>true</extensions>
			<configuration>
				<androidManifestFile>${project.build.directory}/AndroidManifest.xml</androidManifestFile>
				<mergeManifests>true</mergeManifests>
				
				<assetsDirectory>${project.basedir}/assets</assetsDirectory>
				<resourceDirectory>${project.basedir}/res</resourceDirectory>
				<nativeLibrariesDirectory>${project.basedir}/src/main/native</nativeLibrariesDirectory>
				
				<sdk>
					<platform>17</platform>
				</sdk>
				
				<undeployBeforeDeploy>true</undeployBeforeDeploy>
				
			</configuration>
		</plugin>
		  
	    <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.0</version>
	        <configuration>
	          <source>1.6</source>
	          <target>1.6</target>
	          <encoding>UTF-8</encoding>
	        </configuration>
	    </plugin>
	      
	    <!-- building src/test/java as Test JAR for reuse, excluding generated/inherited classes in root test package com.cloud.test.* -->
	    <plugin>
	       <groupId>org.apache.maven.plugins</groupId>
	       <artifactId>maven-jar-plugin</artifactId>
	       <version>2.4</version>
	       <executions>
	         <execution>
	           <goals>
	             <goal>test-jar</goal>
	           </goals>
	         </execution>
	       </executions>
	       <configuration>
	          <excludes>
	            <exclude>com/cloud/test/*.class</exclude>
	          </excludes>
	       </configuration>
	    </plugin>
	    
	    <plugin>
	        <groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-release-plugin</artifactId>
	        <version>2.4</version>
	        <configuration>
	          <tagNameFormat>CloudSDK-v@{project.version}</tagNameFormat>
	          <releaseProfiles>build-script</releaseProfiles>
	          <preparationGoals>clean verify -Dprofile=build-script</preparationGoals>
	        </configuration>
	    </plugin>
  	</plugins>

  </build>
  
  <reporting>
    <plugins>
        
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.6</version>
      </plugin>
      
      <!-- FIXME: Cobertura needs to instrument Framework and SDK classes and use those instrumented .class files in classpath while running tests -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.5.2</version>
        <configuration>
          <formats>
            <format>html</format>
          </formats>
        </configuration>
      </plugin>
      
    </plugins>
  </reporting>
</project>